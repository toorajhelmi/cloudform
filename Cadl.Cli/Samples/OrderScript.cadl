message Order //Message used for receiving a new order from the client
{
    int Id
    int UserId
    int ItemId
    int Quantity
    int Status
}

message Processing //Message used for passing the current order status to the client
{
    int OrderId
    int OrderStatus
}

//the first param is type of the component and second it the name of the deployed component
//the lower case intake is the name of the component used to refer back to this component
//within this script
//trigger specifies what triggers the function which could be request or timer
//  the request post body is placed in a variable called order
component(Function, ProcessOrder) processOrder size:F
    trigger(request, order)
{
    //Runs a SQL SELECT statement on db 'Transaction' assigning the result is assigned to stock
    sql(stock, Transaction)
    {
        select Available from [Transaction].Inventory
        where Id = order.ItemId
    }
    
    sql(onHold, Transaction)
    {  
        select OnHold from [Transaction].Hold
        where Id = order.ItemId
    }
    
    if (stock - onHold >= order.Quantity)
    {
        //Runs a SQL INSERT statement on db 'Transaction'
        sql(Transaction)
        {
            insert into [Transaction].Hold (Item, Expiration)
            values (order.ItemId, SELECT DATEADD(minute, 5, GETDATE()))
        }
        
        //Runs a SQL UPDATE statement
        sql(Transaction)
        {
            update [Transaction].Inventory
            set OnHold = OnHold + order.Quantity
            where Id = order.ItemId
        }
        
        //Runs a SQL INSERT statement and assgined the new ID to order.Id
        sql(order.Id, Transaction)
        {
            insert into [Transaction].Order (UserId, ItemId, Quantity, Status)
            output inserted.#Id
            values (order.UserId, order.TicketId, order.Quantity, 1)
        }
                 
        queue(paymentQueue, order)

        var processing = 
        {
            OrderId: order.Id,
            OrderStatus: 1
        };
        
        return processing
    }
    else
    {
        sql(Transaction)
        {
            update [Transaction].Order
            set Status = 5
            where Id = order.Id
        }
        
        var processing = 
        {
            OrderId: order.Id,
            OrderStatus = 5
        };

        return processing
    }
}

component(SQL, Transaction) transactions
{
    Table([Customer])
    [
        Id          uniqueIdentifier    not null  default NewId()    PRIMARY KEY,
        FirstName   varchar(100),
        LastName    varchar(100),
        Email       varchar(100)        not null,
        Password    varchar(100)        not null
    ]
    
    Table([Order])
    [
        Id          uniqueIdentifier     not null  default NewId()    PRIMARY KEY,
        CustomerId  uniqueIdentifier     not null  REFERENCES [Customer] (Id),
        ItemId      int                  not null,
        Quantity    int                  not null,
        Status      int                  not null

    ]
    
    Table([OrderStatus])
    [
        Id          uniqueIdentifier     not null  default NewId()    PRIMARY KEY,
        StatusId    int                  not null,
        Name        varchar(50)          not null
    ]
    {
        (StatusId, Name) 
        Values
            (1, 'Pending Payment'),
            (2, 'Pending Receipt'),
            (3, 'Payment Declined'),
            (4, 'Processed'),
            (5, 'Out Of Stock')
    }
    
    Table(Inventory)
    [
        Id          uniqueIdentifier     not null  default NewId()    PRIMARY KEY,
        ItemId      int                  not null,
        Available   int                  not null,
        OnHold      int                  not null
    ]
    
    Table(Hold)
    [
        Id          uniqueIdentifier     not null  default NewId()    PRIMARY KEY,
        ItemId      int                  not null,
        Expiration  datetime             not null,
        Quantity    int                  not null
    ]
}

component(Queue, payment) paymentQueue 

//Triggered when a new object is added to the payment queue.
component(Function, ProcessPayment) processPayment size:F
    trigger(queue, payment)
{
    //Takes the object placed in the payment queue and assigns it to order
    order = enqueue(payment)
    
    //code will place a placeholder function to be field by the developer.
    //1st arg is the output of the function (use void for no output)
    //2nd arg is the name of the function
    //The rest are inputs tp the function
    processed = code(bool, Process Payment, order)
    
    if (processed)
    {
        sql(Transaction)
        {
            update [Transaction].Order
            set Status = 2
            where Id = order.I
        }
        sql(Transaction)
        {
            update [Transaction].Inventory
            set Available = Available -order.Quantity,
            Set OnHold = OnHold - order.Quantity
            where Id = order.ItemId
        }
        Queue(receipt, Order)
    }
    else
    {
        sql(Transaction)
        {
            update [Transaction].Order
            set status=3
            where Id = order.Id
        }
    }
}

component(Function, CheckHolds) checkHolds 
    trigger(timer, 0:0:1:0) //days:hours:minutes:seconds
{
    sql(expiredHolds, Transaction)
    {
        select * from [Transaction].Hold
        where Expiration < Now
    }
    
    expiredHolds.forEach(function(expiredHold) 
    {
        sql(Transaction)
        {
            update [Transaction].Hold 
            set OnHold = OnHold-expiredHold.Quantity
            where ItemId = expiredHold.ItemId
        }
        sql(Transaction)
        {
            delete [Transaction].Hold
            where ItemId = expiredHold.ItemId
        }  
    });
}

component(Queue, receipt) receiptQueue

component(Function, GenerateReceipt) generateReceipt size:F
    trigger(queue, receipt)
{
    order = enqueue(receipt)
    code('Generate Receipt')
    sql(Transaction)
    {
        update [Transaction].Order
        set Status = 4
        where Id = order.Id
    }
}







